# Modified from the Direnv wiki entry for Poetry
# It has been adjusted to check for files more thoroughly and if they are missing request corrective action.
deploy_poetry() {
  PYPROJECT_TOML="${PYPROJECT_TOML:-pyproject.toml}"
  if [[ ! -f "$PYPROJECT_TOML" ]]; then
      log_status "No pyproject.toml found. Run \`poetry init\` manually to create a \`$PYPROJECT_TOML\` first."
      return
  fi

  if [[ -d ".venv" ]]; then
      VIRTUAL_ENV="$(pwd)/.venv"
  else
      VIRTUAL_ENV=$(poetry env info --path 2>/dev/null ; true)
  fi

  if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
      log_status "No virtual environment exists. Executing \`poetry install\` to create one."
      poetry install
      VIRTUAL_ENV=$(poetry env info --path)
  fi

  PATH_add "$VIRTUAL_ENV/bin"
  export POETRY_ACTIVE=1  # or VENV_ACTIVE=1
  export VIRTUAL_ENV

  LOCKFILE_OK=$(poetry check --lock 2>&1 /dev/null ; true)
  if [[ -z LOCKFILE_OK ]]; then
    poetry lock --no-update
  fi

  poetry install --sync
}

# Install packages from Nix and setup some of the development environment
use flake

# Install Python specific modules modules related to Poetry
deploy_poetry
